// Import ExtPay for payment handling
import ExtPay from 'extpay';
const extpay = ExtPay('omyom');
extpay.startBackground();

// Function to check if user has premium features available
function checkUserPremiumStatus() {
	return new Promise((resolve) => {
		extpay.getUser().then(user => {
			const isPremium = user.paid;
			// Update storage with premium status
			chrome.storage.sync.get(['gdprCompliance'], (settings) => {
				// Only enable GDPR compliance if user has paid
				if (isPremium && !settings.gdprCompliance) {
					chrome.storage.sync.set({ gdprCompliance: true });
				} else if (!isPremium && settings.gdprCompliance) {
					chrome.storage.sync.set({ gdprCompliance: false });
				}
				resolve(isPremium);
			});
		}).catch(error => {
			console.error("Error checking payment status:", error);
			resolve(false);
		});
	});
}

// Listen for payment events
extpay.onPaid.addListener(user => {
	console.log('User has paid for premium features!');
	// Enable premium features
	chrome.storage.sync.set({ gdprCompliance: true });
	// Update badge
	updateBadge();
});

// Initialize default settings when the extension is installed
chrome.runtime.onInstalled.addListener(() => {
	// First check if we have settings in localStorage to restore
	const savedSettings = localStorage.getItem('ccm_settings');
	const savedHistory = localStorage.getItem('ccm_history');
	
	// Default settings to use if nothing is found
	const defaultSettings = {
		enabled: true,
		autoAccept: true,
		smartMode: true,
		cloudMode: false, // Off by default as it requires consent
		privacyMode: false, // Off by default as it requires consent
		gdprCompliance: false  // OFF by default - this is a premium feature
	};
	
	// Initialize with either saved settings or defaults
	const settings = savedSettings ? JSON.parse(savedSettings) : defaultSettings;
	
	// Apply the settings to chrome.storage.sync
	chrome.storage.sync.set(settings);
	console.log('Cookie Consent Manager initialized with ' + (savedSettings ? 'saved' : 'default') + ' settings');
	
	// Default local storage data
	const defaultLocalData = {
		visitedDomains: {},
		capturedDialogs: [],
		dialogHistory: [],
		pendingSubmissions: [],
		dataCollectionConsent: false,
		initialPermissionAsked: false
	};
	
	// Initialize with either saved history or defaults
	const localData = savedHistory ? JSON.parse(savedHistory) : defaultLocalData;
	
	// Apply the local data to chrome.storage.local
	chrome.storage.local.set(localData);
	
	if (savedHistory) {
		console.log('Restored history with ' + localData.dialogHistory.length + ' entries');
	}

	// Set up alarm for daily cleanup of old domain records
	chrome.alarms.create('cleanupVisitedDomains', { periodInMinutes: 1440 }); // 24 hours
	
	// Set up alarm for regular backup of settings and history
	chrome.alarms.create('backupSettingsAndHistory', { periodInMinutes: 10 }); // Every 10 minutes
	
	// Check premium status on startup
	checkUserPremiumStatus().then(isPremium => {
		console.log('Premium features ' + (isPremium ? 'enabled' : 'disabled'));
	});
});

// Track captured dialogs across tabs
let capturedDialogCount = 0;
let pendingSubmissions = [];

// Clean up visited domains older than 30 days
function cleanupVisitedDomains() {
	chrome.storage.local.get('visitedDomains', (result) => {
		const domains = result.visitedDomains || {};
		const now = Date.now();
		const thirtyDaysInMs = 30 * 24 * 60 * 60 * 1000;
		let cleanupCount = 0;

		// Remove entries older than 30 days
		Object.keys(domains).forEach(domain => {
			if (now - domains[domain].firstVisit > thirtyDaysInMs) {
				delete domains[domain];
				cleanupCount++;
			}
		});

		// Save updated domain list
		chrome.storage.local.set({ visitedDomains: domains });
		console.log(`Cleaned up ${cleanupCount} old domain records`);
		
		// Backup after cleanup
		backupSettingsAndHistory();
	});
}

// Backup settings and history to localStorage
function backupSettingsAndHistory() {
	// Get all settings and save to localStorage
	chrome.storage.sync.get(null, (settings) => {
		localStorage.setItem('ccm_settings', JSON.stringify(settings));
	});
	
	// Get all local storage data and save to localStorage
	chrome.storage.local.get(null, (data) => {
		localStorage.setItem('ccm_history', JSON.stringify(data));
	});
	
	console.log('Settings and history backed up to localStorage: ' + new Date().toISOString());
}

// Listen for the alarms
chrome.alarms.onAlarm.addListener((alarm) => {
	if (alarm.name === 'cleanupVisitedDomains') {
		cleanupVisitedDomains();
	} else if (alarm.name === 'backupSettingsAndHistory') {
		backupSettingsAndHistory();
	}
});

// Handle messages from popup.js or content.js
chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
	if (message.action === 'settingsUpdated') {
		// Broadcast settings to all tabs
		chrome.tabs.query({}, (tabs) => {
			tabs.forEach((tab) => {
				chrome.tabs.sendMessage(tab.id, {
					action: 'settingsUpdated',
					settings: message.settings
				}).catch(() => {
					// Ignore errors for tabs that don't have our content script loaded
				});
			});
		});
		updateBadge();
		
		// Backup settings immediately when they change
		backupSettingsAndHistory();
		
		sendResponse({ success: true });
	} else if (message.action === 'dialogCaptured') {
		// Make sure we have a dialog object and not just a count
		if (message.dialog) {
			// Store the captured dialog - history is now the single source of truth
			// No need to call addDialogToHistory separately
			storeDialogInHistory(message.dialog, sender.tab?.id);
		}
		sendResponse({ success: true });
	} else if (message.action === 'getCapturedDialogCount') {
		getCapturedDialogCount(sendResponse);
		return true;
	} else if (message.action === 'getDialogHistory') {
		getDialogHistory(sendResponse);
		return true;
	} else if (message.action === 'clearDialogHistory') {
		clearDialogHistory(sendResponse);
		return true;
	} else if (message.action === 'submitToCloud') {
		// Handle cloud submission
		submitToCloud(message.data);
		return true;
	} else if (message.action === 'getPendingSubmissions') {
		getPendingSubmissions(sendResponse);
		return true;
	} else if (message.action === 'clearPendingSubmissions') {
		clearPendingSubmissions(sendResponse);
		return true;
	} else if (message.action === 'recordDomainVisit') {
		recordDomainVisit(message.domain, sendResponse);
		return true;
	} else if (message.action === 'checkDomainVisited') {
		checkDomainVisited(message.domain, sendResponse);
		return true;
	} else if (message.action === 'getDataCollectionConsent') {
		getDataCollectionConsent(sendResponse);
		return true;
	} else if (message.action === 'setDataCollectionConsent') {
		setDataCollectionConsent(message.consent, sendResponse);
		return true;
	} else if (message.action === 'markDialogAsReviewed') {
		markDialogAsReviewed(message.dialogId, sendResponse);
		return true;
	} else if (message.action === 'getSettings') {
		// Get settings from storage and send them back
		chrome.storage.sync.get({
			enabled: true,
			autoAccept: true,
			smartMode: true,
			cloudMode: false,
			privacyMode: false,
			gdprCompliance: false,
			devMode: false
		}, (settings) => {
			sendResponse({ settings });
		});
		return true;
	} else if (message.action === 'checkPremiumStatus') {
		// Check if user has premium features
		checkUserPremiumStatus().then(isPremium => {
			sendResponse({ isPremium });
		});
		return true;
	} else if (message.action === 'openPaymentPage') {
		// Open the payment page
		extpay.openPaymentPage();
		sendResponse({ success: true });
		return true;
	} else if (message.action === 'openTrialPage') {
		// Open the trial page
		extpay.openTrialPage('7-day');
		sendResponse({ success: true });
		return true;
	} else if (message.action === 'submitDialogRating') {
		// Handle dialog rating
		const { dialogId, rating, isGoodMatch, sanitizedDialog } = message.data;
		
		// If we have sanitized data from content script, use it for cloud submission
		if (sanitizedDialog) {
			// Submit sanitized data to cloud
			submitToCloud({
				url: sanitizedDialog.url, // Already sanitized
				domain: sanitizedDialog.domain,
				selector: sanitizedDialog.selector,
				buttonType: sanitizedDialog.buttonType,
				buttonText: sanitizedDialog.buttonText,
				html: sanitizedDialog.html, // Already sanitized
				capturedAt: sanitizedDialog.capturedAt,
				rating,
				isGoodMatch,
				region: sanitizedDialog.region
			});
		}
		
		markDialogAsReviewed(dialogId);
		sendResponse({ success: true });
		return true;
	} else if (message.action === 'getCapturedDialogs') {
		getCapturedDialogs(sendResponse);
		return true;
	}
	
	return true;
});

// Record a domain visit
function recordDomainVisit(domain, sendResponse) {
	chrome.storage.local.get('visitedDomains', (result) => {
		const domains = result.visitedDomains || {};
		const now = Date.now();

		// If domain doesn't exist, add it with first visit timestamp
		if (!domains[domain]) {
			domains[domain] = {
				firstVisit: now,
				lastVisit: now,
				visitCount: 1
			};
		} else {
			// Otherwise, update the existing record
			domains[domain].lastVisit = now;
			domains[domain].visitCount += 1;
		}

		// Save updated domain list
		chrome.storage.local.set({ visitedDomains: domains }, () => {
			sendResponse({ success: true, isFirstVisit: domains[domain].visitCount === 1 });
		});
	});
}

// Check if a domain has been visited before
function checkDomainVisited(domain, sendResponse) {
	chrome.storage.local.get('visitedDomains', (result) => {
		const domains = result.visitedDomains || {};
		const domainInfo = domains[domain];
		
		if (domainInfo) {
			sendResponse({
				visited: true,
				isFirstVisit: domainInfo.visitCount === 1,
				firstVisit: domainInfo.firstVisit,
				lastVisit: domainInfo.lastVisit,
				visitCount: domainInfo.visitCount
			});
		} else {
			sendResponse({ visited: false });
		}
	});
}

// Combined function to store dialogs in history (replacing storeCapturedDialog and addDialogToHistory)
function storeDialogInHistory(dialog, tabId) {
	chrome.storage.local.get(['dialogHistory'], (result) => {
		const history = result.dialogHistory || [];
		
		// No longer checking for consent as local storage is essential for functionality
		
		// Check for duplicates (same domain, button type, and captured within 2 seconds)
		const now = Date.now();
		const threshold = 2000; // 2 seconds threshold for duplicates
		const isDuplicate = history.some(existingDialog => {
			// Compare domain and button type
			if (existingDialog.domain === dialog.domain && 
				existingDialog.buttonType === dialog.buttonType) {
				
				// Compare capture times
				const capturedAt = new Date(existingDialog.capturedAt).getTime();
				return Math.abs(now - capturedAt) < threshold;
			}
			return false;
		});
		
		// Only add if not a duplicate
		if (!isDuplicate) {
			// Add the dialog to the history
			history.push({
				...dialog,
				id: generateId(),
				capturedAt: now,
				reviewed: false,
				needsReview: true
			});
			
			// Limit to 100 history entries
			while (history.length > 100) {
				history.shift();
			}
			
			// Save updated history
			chrome.storage.local.set({ dialogHistory: history }, () => {
				// Update badge
				updateBadge();
				
				// Backup the updated history
				backupSettingsAndHistory();
				
				// Notify tab if provided
				if (tabId) {
					chrome.tabs.sendMessage(tabId, { action: 'dialogStored' });
				}
			});
		} else {
			console.log('Cookie Consent Manager: Skipped duplicate dialog capture');
		}
	});
}

// Get dialog history
function getDialogHistory(sendResponse) {
	chrome.storage.local.get('dialogHistory', (result) => {
		sendResponse({ history: result.dialogHistory || [] });
	});
}

// Clear dialog history
function clearDialogHistory(sendResponse) {
	chrome.storage.local.set({ dialogHistory: [] }, () => {
		// Backup the cleared history
		backupSettingsAndHistory();
		sendResponse({ success: true });
	});
}

// Mark a dialog as reviewed in history
function markDialogAsReviewed(dialogId, sendResponse) {
	chrome.storage.local.get(['dialogHistory', 'capturedDialogs'], (result) => {
		const history = result.dialogHistory || [];
		const dialogs = result.capturedDialogs || [];
		
		// Find the dialog in history and mark as reviewed
		const updatedHistory = history.map(dialog => {
			if (dialog.id === dialogId) {
				return { ...dialog, reviewed: true };
			}
			return dialog;
		});
		
		// Remove from captured dialogs that need review
		const updatedDialogs = dialogs.filter(dialog => dialog.id !== dialogId);
		
		// Save both updated lists
		chrome.storage.local.set({ 
			dialogHistory: updatedHistory,
			capturedDialogs: updatedDialogs 
		}, () => {
			updateBadge();
			
			// Backup the updated history
			backupSettingsAndHistory();
			
			if (sendResponse) sendResponse({ success: true });
		});
	});
}

// Update the extension badge
function updateBadge() {
	chrome.storage.local.get(['capturedDialogs', 'pendingSubmissions'], (result) => {
		const capturedCount = result.capturedDialogs?.length || 0;
		const pendingCount = result.pendingSubmissions?.length || 0;
		const totalCount = capturedCount + pendingCount;
		
		if (totalCount > 0) {
			chrome.action.setBadgeText({ text: totalCount.toString() });
			chrome.action.setBadgeBackgroundColor({ color: '#E53935' });
		} else {
			chrome.action.setBadgeText({ text: '' });
		}
	});
}

// Get the count of captured dialogs
function getCapturedDialogCount(sendResponse) {
	chrome.storage.local.get(['capturedDialogs', 'pendingSubmissions'], (result) => {
		const capturedCount = result.capturedDialogs?.length || 0;
		const pendingCount = result.pendingSubmissions?.length || 0;
		const totalCount = capturedCount + pendingCount;
		sendResponse({ count: totalCount });
	});
}

// Get pending submissions
function getPendingSubmissions(sendResponse) {
	chrome.storage.local.get('pendingSubmissions', (result) => {
		sendResponse({ pendingSubmissions: result.pendingSubmissions || [] });
	});
}

// Clear pending submissions
function clearPendingSubmissions(sendResponse) {
	chrome.storage.local.set({ pendingSubmissions: [] }, () => {
		updateBadge();
		sendResponse({ success: true });
	});
}

// Generate a random ID
function generateId() {
	return Math.random().toString(36).substring(2, 15);
}

// Get data collection consent status
function getDataCollectionConsent(sendResponse) {
	chrome.storage.local.get('dataCollectionConsent', (result) => {
		sendResponse({ consent: result.dataCollectionConsent || false });
	});
}

// Set data collection consent status
function setDataCollectionConsent(consent, sendResponse) {
	chrome.storage.local.set({ dataCollectionConsent: consent }, () => {
		// Backup the updated consent setting
		backupSettingsAndHistory();
		sendResponse({ success: true });
	});
}

// Check for region-specific regulations
function checkRegionCompliance(url) {
	const domain = new URL(url).hostname;
	
	// Check for UK domains
	const isUKDomain = domain.endsWith('.uk') || domain.endsWith('.co.uk') || 
		domain.endsWith('.org.uk') || domain.endsWith('.gov.uk');
	
	// Check for EU domains
	const isEUDomain = domain.endsWith('.eu') || domain.endsWith('.de') || 
		domain.endsWith('.fr') || domain.endsWith('.it') || 
		domain.endsWith('.es') || domain.endsWith('.nl');
	
	if (isUKDomain) {
		return 'UK';
	} else if (isEUDomain) {
		return 'EU';
	}
	
	return 'unknown';
}

function submitToCloud(data) {
	// Add to pending submissions
	const submission = {
		id: Date.now().toString() + Math.random().toString(36).substr(2, 5),
		...data,
		status: 'pending',
		submittedAt: new Date().toISOString()
	};
	
	pendingSubmissions.push(submission);
	updateBadge();
	
	// Actually send to server
	const SERVER_URL = 'http://localhost:3000/api/reviews';
	
	console.log('Submitting to cloud:', data);
	
	// Send the data to our server
	fetch(SERVER_URL, {
		method: 'POST',
		headers: {
			'Content-Type': 'application/json',
		},
		body: JSON.stringify(data)
	})
	.then(response => response.json())
	.then(result => {
		if (result.success) {
			// Mark as submitted
			const pendingSubmission = pendingSubmissions.find(s => s.id === submission.id);
			if (pendingSubmission) {
				pendingSubmission.status = 'submitted';
				pendingSubmission.serverId = result.review.id;
			}
			
			console.log('Submission successful:', result);
		} else {
			// Mark as failed
			const pendingSubmission = pendingSubmissions.find(s => s.id === submission.id);
			if (pendingSubmission) {
				pendingSubmission.status = 'failed';
				pendingSubmission.error = result.error || 'Unknown error';
			}
			
			console.error('Submission failed:', result);
		}
		
		// Broadcast that we have a new submission
		chrome.runtime.sendMessage({ 
			action: 'submissionUpdated', 
			pendingCount: pendingSubmissions.filter(s => s.status === 'pending').length
		});
	})
	.catch(error => {
		// Mark as failed
		const pendingSubmission = pendingSubmissions.find(s => s.id === submission.id);
		if (pendingSubmission) {
			pendingSubmission.status = 'failed';
			pendingSubmission.error = error.message || 'Network error';
		}
		
		console.error('Submission error:', error);
		
		// Broadcast that we have a new submission
		chrome.runtime.sendMessage({ 
			action: 'submissionUpdated', 
			pendingCount: pendingSubmissions.filter(s => s.status === 'pending').length,
			error: error.message || 'Network error'
		});
	});
}

// Add this function to clean up any stale captured dialogs
function cleanupCapturedDialogs() {
	chrome.storage.local.get(['capturedDialogs'], (result) => {
		const dialogs = result.capturedDialogs || [];
		
		// Only keep dialogs that are less than 7 days old
		const sevenDaysAgo = Date.now() - (7 * 24 * 60 * 60 * 1000);
		const filteredDialogs = dialogs.filter(dialog => {
			const capturedAt = typeof dialog.capturedAt === 'string' 
				? new Date(dialog.capturedAt).getTime() 
				: dialog.capturedAt;
			return capturedAt > sevenDaysAgo;
		});
		
		// Save the filtered dialogs
		if (filteredDialogs.length !== dialogs.length) {
			chrome.storage.local.set({ capturedDialogs: filteredDialogs }, () => {
				updateBadge();
			});
		}
	});
}

// Call cleanup when extension is first loaded
cleanupCapturedDialogs();

// Set up an alarm to regularly clean up old dialogs
chrome.alarms.create('cleanupCapturedDialogs', { periodInMinutes: 720 }); // 12 hours

// Add this to the alarm listener
chrome.alarms.onAlarm.addListener((alarm) => {
	if (alarm.name === 'cleanupVisitedDomains') {
		cleanupVisitedDomains();
	} else if (alarm.name === 'cleanupCapturedDialogs') {
		cleanupCapturedDialogs();
	} else if (alarm.name === 'backupSettingsAndHistory') {
		backupSettingsAndHistory();
	}
});

// Get all captured dialogs
function getCapturedDialogs(sendResponse) {
	chrome.storage.local.get('capturedDialogs', (result) => {
		const dialogs = result.capturedDialogs || [];
		sendResponse({ dialogs });
	});
}

// Update captured dialog count for badge
function updateCapturedDialogCount() {
	chrome.storage.local.get('dialogHistory', (result) => {
		const history = result.dialogHistory || [];
		// Count only unreviewed items
		const count = history.filter(dialog => dialog.needsReview).length;
		
		// Update badge
		if (count > 0) {
			chrome.action.setBadgeText({ text: count.toString() });
			chrome.action.setBadgeBackgroundColor({ color: '#E53935' });
		} else {
			chrome.action.setBadgeText({ text: '' });
		}
	});
} 